const { Client, ActivityType } = require("discord.js");
const { mongoose, connect } = require("mongoose");
const chalk = require("chalk");
const mongo = process.env.mongodb;

function progressBar(progress) {
  const width = 30;
  const percentage = Math.floor((progress / 100) * width);
  const progressBar = `${"‚ñà".repeat(percentage)}${"-".repeat(width - percentage)}`;
  return `[${progressBar}] ${progress}%`;
}

module.exports = {
  name: "ready",
  once: true,
  async execute(client) {
    // Display CodeX ASCII art directly
    console.log("\n");
    console.log(" ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñí");
    console.log("‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñì‚ñà   ‚ñÄ ‚ñí‚ñí ‚ñà ‚ñà ‚ñí‚ñë");
    console.log("‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñà   ‚ñë‚ñë  ‚ñà   ‚ñë");
    console.log("‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñì‚ñà  ‚ñÑ  ‚ñë ‚ñà ‚ñà ‚ñí ");
    console.log("‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà‚ñí");
    console.log("‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë  ‚ñí‚ñí‚ñì  ‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí‚ñí ‚ñë ‚ñë‚ñì ‚ñë");
    console.log("  ‚ñë  ‚ñí     ‚ñë ‚ñí ‚ñí‚ñë  ‚ñë ‚ñí  ‚ñí  ‚ñë ‚ñë  ‚ñë‚ñë‚ñë   ‚ñë‚ñí ‚ñë");
    console.log("‚ñë        ‚ñë ‚ñë ‚ñë ‚ñí   ‚ñë ‚ñë  ‚ñë    ‚ñë    ‚ñë    ‚ñë  ");
    console.log("‚ñë ‚ñë          ‚ñë ‚ñë     ‚ñë       ‚ñë  ‚ñë ‚ñë    ‚ñë  ");
    console.log("‚ñë                  ‚ñë                      ");
    console.log("\n");
    
    // Custom border with CodeX branding
    const border = "‚ïê".repeat(60);
    console.log(border);
    console.log(`‚ïë${" ".repeat(23)}CODEX SYSTEM${" ".repeat(23)}‚ïë`);
    console.log(border);
    
    mongoose.set("strictQuery", true);
    console.log(`\n[DATABASE] Initializing connection...`);

    try {
      let progress = 0;
      const progressUpdateInterval = 10;
      const maxProgress = 100;

      // Fancy database connection animation
      const loadingChars = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
      let charIndex = 0;
      
      while (progress <= maxProgress) {
        process.stdout.write(`\r[DATABASE] Connection progress: ${loadingChars[charIndex]} ${progressBar(progress)}`);
        await new Promise((resolve) => setTimeout(resolve, 150));
        progress += progressUpdateInterval;
        charIndex = (charIndex + 1) % loadingChars.length;
      }
      console.log("\n");

      mongoose.connection.on("connecting", () => {
        console.log(`[DATABASE] Establishing secure connection...`);
      });

      mongoose.connection.on("connected", () => {
        console.log(`[DATABASE] ‚úÖ Connection established successfully`);
      });

      mongoose.connection.on("error", (error) => {
        console.error(
          chalk.redBright(`[DATABASE] ‚ùå Connection error: ${error.message}`)
        );
      });

      mongoose.connection.on("disconnected", () => {
        console.log(chalk.redBright(`[DATABASE] ‚ùå Connection terminated`));
      });

      await mongoose.connect(mongo, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });

      if (mongoose.connection.readyState !== 1) {
        console.log(chalk.redBright(`[DATABASE] ‚ö†Ô∏è Connection unstable`));
      }

      // System initialization complete animation
      console.log("\n" + border);
      console.log(`‚ïë${" ".repeat(15)}SYSTEM INITIALIZATION COMPLETE${" ".repeat(15)}‚ïë`);
      console.log(border + "\n");

      // Bot statistics with fancy display
      let servers = await client.guilds.cache.size;
      let users = await client.guilds.cache.reduce(
        (a, b) => a + b.memberCount,
        0
      );
      
      console.log(`[SYSTEM] ${client.user.username} is now online and operational.`);
      
      // Display stats in a box
      console.log("‚îå" + "‚îÄ".repeat(58) + "‚îê");
      console.log(`‚îÇ CODEX STATISTICS${" ".repeat(42)}‚îÇ`);
      console.log("‚îú" + "‚îÄ".repeat(58) + "‚î§");
      console.log(`‚îÇ Users    : ${formatNumber(users).padEnd(48)} ‚îÇ`);
      console.log(`‚îÇ Servers  : ${servers.toString().padEnd(48)} ‚îÇ`);
      console.log(`‚îÇ Commands : ${client.commands.size.toString().padEnd(48)} ‚îÇ`);
      console.log("‚îî" + "‚îÄ".repeat(58) + "‚îò");

      let status = [
        {
          name: `CodeX | Premium Features`,
          type: ActivityType.Playing,
        },
        {
          name: `/bot info | codex.gg/premium`,
          type: ActivityType.Listening,
        },
        {
          name: `/bot invite | ${client.commands.size} Commands`,
          type: ActivityType.Listening,
        },
        {
          name: "Powered by CodeX",
          type: ActivityType.Playing,
        },
        {
          name: `/help | in ${servers} Servers üèÜ`,
          type: ActivityType.Playing,
        },
        {
          name: `/help | with ${formatNumber(users)} Users üë§`,
          type: ActivityType.Watching,
        },
      ];
      
      setInterval(() => {
        let random = Math.floor(Math.random() * status.length);
        client.user.setActivity(status[random]);
      }, 15000);
      
      console.log(`[SYSTEM] Status rotation enabled successfully.`);
    } catch (error) {
      console.error(
        chalk.redBright(`[ERROR] Database connection failed: ${error.message}`)
      );
      console.log(chalk.redBright(`[DATABASE] ‚ùå Connection attempt failed`));
    }

    function formatNumber(number) {
      if (number >= 1000000) {
        return (number / 1000000).toFixed(1) + "M";
      } else if (number >= 1000) {
        return (number / 1000).toFixed(1) + "K";
      } else {
        return number.toString();
      }
    }
  },
};

